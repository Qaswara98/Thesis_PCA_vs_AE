FROM ubuntu:latest

RUN export TZ=Europe DEBIAN_FRONTEND=noninteractive && \
    cd /root && \
    apt-get update -qq && apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    build-essential \
    dirmngr \
    gnupg \
    libcurl4-openssl-dev \
    libgpgme11-dev \
    libnetcdf-dev \
    libseccomp-dev \
    libssl-dev \
    libxml2-dev \
    nano \
    pkg-config \
    software-properties-common \
    squashfs-tools \
    uuid-dev \
    vim \
    wget \
    default-jre \
    unzip && \
    #Install Java
    apt-get install -y openjdk-17-jre-headless default-jre && \
    # Install Nextflow
    curl -s https://get.nextflow.io | bash && \
    mv nextflow /usr/local/bin/ && \
    #Install git
    apt-get install -y git && \
    # Install R version 4.4.0
    apt-get install -y r-base=4.4.0 && \
    # Install necessary R packages with specific versions
    R -e "install.packages('remotes', repos='http://cran.rstudio.com/')" && \
    R -e "install.packages('BiocManager', repos='http://cran.rstudio.com/')" && \
    R -e "BiocManager::install(version = '3.18')" && \
    R -e "remotes::install_version('ggplot2', version = '3.5.1', repos = 'http://cran.us.r-project.org')" && \
    R -e "BiocManager::install('clusterProfiler', version = '4.11.1')" && \
    R -e "BiocManager::install('org.Hs.eg.db', version = '3.19.1')" && \
    R -e "BiocManager::install('AnnotationDbi', version = '1.65.2')" && \
    R -e "BiocManager::install('graphite', version = '1.49.0')" && \
    R -e "BiocManager::install('DOSE', version = '3.29.2')" && \
    R -e "BiocManager::install('enrichplot', version = '1.23.2')" && \
    R -e "BiocManager::install('ReactomePA', version = '1.47.1')" && \
    R -e "BiocManager::install('STRINGdb', version = '2.15.4')" && \
    R -e "remotes::install_version('igraph', version = '2.0.3', repos = 'http://cran.us.r-project.org')" && \
    R -e "BiocManager::install('BioNAR', version = '1.5.5')" && \
    R -e "remotes::install_version('randomcoloR', version = '1.1.0.1', repos = 'http://cran.us.r-project.org')" && \
    R -e "remotes::install_version('dplyr', version = '1.1.4', repos = 'http://cran.us.r-project.org')" && \
    R -e "remotes::install_version('tidyr', version = '1.3.1', repos = 'http://cran.us.r-project.org')" && \
    R -e "BiocManager::install('GEOquery', version = '2.71.0')" && \
    R -e "BiocManager::install('DESeq2', version = '1.43.5')" && \
    R -e "BiocManager::install('edgeR', version = '4.1.25')" && \
    R -e "remotes::install_version('openxlsx', version = '4.2.5.2', repos = 'http://cran.us.r-project.org')" && \
    R -e "BiocManager::install('biomaRt', version = '2.59.1')" && \
    R -e "remotes::install_version('VennDiagram', version = '1.7.3', repos = 'http://cran.us.r-project.org')" && \
    # Install Python version 3.8
    apt-get install -y python3.8 python3-pip && \
    # Install necessary Python packages with specific versions
    pip3 install numpy==1.26.1 && \
    pip3 install pandas==1.4.1 && \
    pip3 install matplotlib==3.5.1 && \
    pip3 install scikit-learn==1.3.2 && \
    pip3 install tensorflow==2.15.0 && \
    pip3 install scipy==1.11.3 && \
    pip3 install seaborn==0.12.2 && \
    #Install singularity
    export VERSION=1.18 OS=linux ARCH=amd64 && \
    wget https://dl.google.com/go/go$VERSION.$OS-$ARCH.tar.gz && \
    tar -C /usr/local -xzvf go$VERSION.$OS-$ARCH.tar.gz && \
    rm go$VERSION.$OS-$ARCH.tar.gz && \
    mkdir go && \
    echo 'export GOPATH=${HOME}/go' >> ~/.bashrc && \
    echo 'export PATH=/usr/local/go/bin:${PATH}' >> ~/.bashrc && \
    source ~/.bashrc && \
    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.43.0 && \
    export VERSION=ce-3.9.6 && export VERPATH=3.9.6 && export PATH=/usr/local/go/bin:${PATH} && \
    mkdir -p $GOPATH/src/github.com/sylabs && \
    cd $GOPATH/src/github.com/sylabs && \
    wget https://github.com/sylabs/singularity/releases/download/v${VERPATH}/singularity-${VERSION}.tar.gz && \
    tar -xzf singularity-${VERSION}.tar.gz && \
    cd ./singularity-${VERSION} && \
    ./mconfig && \
    cd builddir && \
    make && \
    make install

#Set command to run when container is started
CMD /bin/bash
